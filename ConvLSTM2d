import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from keras.preprocessing import sequence
from keras.models import Sequential
from keras.layers import Dense,Dropout,Activation,GRU
from keras.layers import LSTM
from keras.layers import Conv1D,MaxPooling1D,Conv2D,MaxPooling2D,ConvLSTM2D
from keras.layers import Flatten,TimeDistributed,Reshape
from keras.preprocessing.image import ImageDataGenerator

np.random.seed(3)
train_datagen = ImageDataGenerator(rescale = 1./255)
test_datagen = ImageDataGenerator(rescale = 1./255)
train_generator = train_datagen.flow_from_directory('/content/gdrive/My Drive/ad/trainingSet',
                                                 target_size = (340, 340),
                                                 batch_size = 2,                                                
                                                 class_mode = 'categorical')
test_generator = test_datagen.flow_from_directory('/content/gdrive/My Drive/ad/testSet',
                                            target_size = (340, 340),
                                            batch_size = 2,                                            
                                            class_mode = 'categorical')
print(test_datagen,train_datagen)

model = Sequential()
model.add(Conv2D(32, kernel_size=(1, 1),activation='relu',input_shape=(340,340,3)))
model.add(Conv2D(64, (1, 1), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dense(128, activation='relu'))
model.add(Dense(1, activation='softmax'))
model.add(Reshape((-1,1)))
model.add(LSTM(50, activation='relu',return_sequences=True))
model.add(Flatten())
model.add(Dense(2))
model.summary()
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

model.fit_generator(
        train_generator,
        steps_per_epoch=5,
        epochs=10,
        validation_data=test_generator,
        validation_steps=5)

print("-- Evaluate --")
scores = model.evaluate_generator(test_gen
                                  erator, steps=1)
print("%s: %.2f%%" %(model.metrics_names[1], scores[1]*100))
